// ----
// Sass (v3.5.6)
// Compass (vundefined)
// ----

$grid-columns: 12 !default
$grid-gutter-width: 15px !default

$container-padding-x: $grid-gutter-width / 2 !default

$screen-sm: 576px
$screen-md: 768px
$screen-lg: 992px
$screen-xl: 1200px

$grid-breakpoints: (xs: 0, sm: $screen-sm, md: $screen-md, lg: $screen-lg, xl: $screen-xl) !default

$container-max-widths: (sm: 540px, md: 720px, lg: 960px, xl: 1140px) !default

$grid-gutter-width-base: 15px
$grid-gutter-widths: (xs: $grid-gutter-width-base + 15px, sm: $grid-gutter-width-base, md: $grid-gutter-width-base, lg: $grid-gutter-width-base, xl: $grid-gutter-width-base)

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints))
  $n: index($breakpoint-names, $name)

  @if not $n
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`"

  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null)

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints)
  $min: map-get($breakpoints, $name)

  @return if($min != 0, $min, null)

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints)
  $next: breakpoint-next($name, $breakpoints)

  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null)

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints)
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}")

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
=media-breakpoint-up($name, $breakpoints: $grid-breakpoints)
  $min: breakpoint-min($name, $breakpoints)

  @if $min
    @media (min-width: $min)
      @content
  @else
    @content

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
=media-breakpoint-down($name, $breakpoints: $grid-breakpoints)
  $max: breakpoint-max($name, $breakpoints)

  @if $max
    @media (max-width: $max)
      @content
  @else
    @content

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
=media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints)
  $min: breakpoint-min($lower, $breakpoints)
  $max: breakpoint-max($upper, $breakpoints)

  @if $min != null and $max != null
    @media (min-width: $min) and (max-width: $max)
      @content
  @else if $max == null
    +media-breakpoint-up($lower, $breakpoints)
      @content
  @else if $min == null
    +media-breakpoint-down($upper, $breakpoints)
      @content

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
=media-breakpoint-only($name, $breakpoints: $grid-breakpoints)
  $min: breakpoint-min($name, $breakpoints)
  $max: breakpoint-max($name, $breakpoints)

  @if $min != null and $max != null
    @media (min-width: $min) and (max-width: $max)
      @content
  @else if $max == null
    +media-breakpoint-up($name, $breakpoints)
      @content
  @else if $min == null
    +media-breakpoint-down($name, $breakpoints)
      @content

=make-col-offset($size, $columns: $grid-columns)
  $num: $size / $columns
  margin-left: if($num == 0, 0, percentage($num))


=make-gutters($gutters: $grid-gutter-widths)
  @each $breakpoint in map-keys($gutters)
    +media-breakpoint-up($breakpoint)
      $gutter: map-get($gutters, $breakpoint)

      padding-right: $gutter / 2
      padding-left: $gutter / 2

=make-col-offset($size, $columns: $grid-columns)
  margin-left: percentage($size / $columns)

=make-col-push($size, $columns: $grid-columns)
  left: if($size > 0, percentage($size / $columns), auto)

=make-col-pull($size, $columns: $grid-columns)
  right: if($size > 0, percentage($size / $columns), auto)

=make-col-modifier($type, $size, $columns)
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push
    +make-col-push($size, $columns)
  @else if $type == pull
    +make-col-pull($size, $columns)
  @else if $type == offset
    +make-col-offset($size, $columns)


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

=make-grid-columns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints)
  // Common properties for all breakpoints
  %grid-column
    position: relative
    width: 100%
    min-height: 1px

    // Prevent columns from collapsing when empty

    +make-gutters($gutters)

  @each $breakpoint in map-keys($breakpoints)
    $infix: breakpoint-infix($breakpoint, $breakpoints)

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns
      .col#{$infix}-#{$i}
        @extend %grid-column

    .col#{$infix}
      @extend %grid-column

    +media-breakpoint-up($breakpoint, $breakpoints)
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix}
        flex-basis: 0
        flex-grow: 1
        max-width: 100%

      .col#{$infix}-auto
        flex: 0 0 auto
        width: auto

      @for $i from 1 through $columns
        .col#{$infix}-#{$i}
          +make-col($i, $columns)

      @each $modifier in pull, push
        @for $i from 0 through $columns
          .#{$modifier}#{$infix}-#{$i}
            +make-col-modifier($modifier, $i, $columns)

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through $columns - 1
        @if not ($infix == "" and $i == 0)
          // Avoid emitting useless .offset-xs-0
          .offset#{$infix}-#{$i}
            +make-col-modifier(offset, $i, $columns)


/// Grid system
//
// Generate semantic grid columns with these mixins.

=make-container($gutters: $grid-gutter-widths)
  position: relative
  margin-left: auto
  margin-right: auto

  @each $breakpoint in map-keys($gutters)
    +media-breakpoint-up($breakpoint)
      $gutter: map-get($gutters, $breakpoint)

      padding-right: $gutter / 2
      padding-left: $gutter / 2

=make-container-left($gutters: $grid-gutter-widths)
  width: 100%
  margin-right: 0
  margin-left: auto

  @each $breakpoint in map-keys($gutters)
    +media-breakpoint-up($breakpoint)
      $gutter: map-get($gutters, $breakpoint)

      padding-right: $gutter / 2
      padding-left: $gutter / 2

=make-container-right($gutters: $grid-gutter-widths)
  width: 100%
  margin-right: auto
  margin-left: 0

  @each $breakpoint in map-keys($gutters)
    +media-breakpoint-up($breakpoint)
      $gutter: map-get($gutters, $breakpoint)

      padding-right: $gutter / 2
      padding-left: $gutter / 2

// For each breakpoint, define the maximum width of the container in a media query
=make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints)
  @each $breakpoint, $container-max-width in $max-widths
    +media-breakpoint-up($breakpoint, $breakpoints)
      max-width: $container-max-width

// For each breakpoint, define the maximum width of the container in a media query
=make-container-half-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints)
  @each $breakpoint, $container-max-width in $max-widths
    +media-breakpoint-up($breakpoint, $breakpoints)
      max-width: $container-max-width / 2

=make-row($gutters: $grid-gutter-widths)
  display: flex
  flex-wrap: wrap
  @each $breakpoint in map-keys($gutters)
    +media-breakpoint-up($breakpoint)
      $gutter: map-get($gutters, $breakpoint)

      margin-right: -($gutter / 2)
      margin-left: -($gutter / 2)

=make-col-ready($gutter: $grid-gutter-width)
  position: relative

  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%
  padding-right: $gutter / 2
  padding-left: $gutter / 2

=make-col($size, $columns: $grid-columns)
  flex: 0 0 percentage($size / $columns)

  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns)

=make-col-auto
  flex: 0 0 auto
  width: auto
  max-width: 100%

  // Reset earlier grid tiers

+make-grid-columns()

.container
  +make-container()
  +make-container-max-widths()

.container-left
  +make-container-left()
  +make-container-half-widths()

.container-right
  +make-container-right()
  +make-container-half-widths()

.row
  +make-row()
